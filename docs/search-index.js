var searchIndex = JSON.parse('{\
"rusty_trees":{"doc":"","t":[0,8,8,3,16,11,11,10,10,11,11,11,11,11,11,10,0,11,11,0,11,10,11,11,11,11,3,3,4,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12],"n":["radix_trie","Key","KeyRef","RadixTrie","Ref","borrow","borrow_mut","concat","concat","default","fmt","from","get","insert","into","is_empty","iter","iter","iter_mut","key_string_impl","new","prefix","remove","try_from","try_into","type_id","Iter","IterState","IterStateItem","Trie","Value","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","from","from","from","into","into","into","into_iter","into_iter","multiunzip","next","next","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","0","0","1"],"q":["rusty_trees","rusty_trees::radix_trie","","","","","","","","","","","","","","","","","","","","","","","","","rusty_trees::radix_trie::iter","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rusty_trees::radix_trie::iter::IterStateItem","",""],"d":["","Trait that the key for a RadixTrie must implement <code>Ref</code> is …","Trait that the key’s Ref type must implement. All …","Implementation of a Radix Trie (also known as a Radix …","Reference type to the key. E.g. for String, Ref would be …","","","Concatenate this key with another","Concatenate an iterator of Self into the owned type","","","Returns the argument unchanged.","Get value corresponding to <code>key</code> in the trie (or <code>None</code> if it …","Insert <code>value</code> into the trie at <code>key</code>. Returns the old value, …","Calls <code>U::from(self)</code>.","Is the key empty?","","Iterater over <code>(P, &amp;mut V)</code> pairs that the trie contains.","Mutable iterater over <code>(P, &amp;V)</code> pairs that the trie contains.","","Create an empty trie","For keys <code>a</code> and <code>b</code>, return the common prefix between the …","Remove the value at <code>key</code> from the trie and return it. <code>None</code> …","","","","Iterator over a RadixTrie","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,1,2,2,1,3,2,2,2,2,2,2,3,0,2,2,0,2,3,2,2,2,2,0,0,0,4,4,5,6,4,5,6,4,5,6,4,5,6,4,5,6,5,5,6,5,6,4,5,6,4,5,6,4,7,8,8],"f":[null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[["iterator",8]]],[[]],[[["",0],["formatter",3]],["result",6]],[[]],[[["",0],["",0]],["option",4]],[[["",0]],["option",4]],[[]],[[["",0]],["bool",0]],null,[[["",0]],["iter",3]],[[["",0]],["itermut",3]],null,[[],["radixtrie",3]],[[["",0],["",0]]],[[["",0],["",0]],["option",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null],"p":[[8,"Key"],[3,"RadixTrie"],[8,"KeyRef"],[4,"IterStateItem"],[3,"Iter"],[3,"IterState"],[13,"Value"],[13,"Trie"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};